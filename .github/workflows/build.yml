name: Build and Deploy to GitHub Pages
permissions:
  # Required to create a GitHub release: <https://docs.github.com/en/rest/releases/releases#create-a-release>.
  contents: write
  # Required to deploy to GitHub Pages.
  pages: write
  # Required for GitHub Pages to verify the source of the deployment.
  # See: <https://github.com/actions/deploy-pages/issues/329>.
  id-token: write
on:
  push:
    branches:
      - main
      
  pull_request:
    types: [opened, synchronize, reopened]
env:
  CARGO_INCREMENTAL: 0
  # Avoid rate-limiting. See: <https://github.com/cargo-bins/cargo-binstall/issues/2045>.
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment
        run: |
          # Default values:
          echo "app_binary_name=baba_yaga" >> "${GITHUB_ENV}"
          echo "app_package_name=baba_yaga" >> "${GITHUB_ENV}"
          echo "app_display_name=Baba Yaga" >> "${GITHUB_ENV}"
          echo "app_short_name=Baba Yaga" >> "${GITHUB_ENV}"

          # File paths:
          echo "app=tmp/app/baba_yaga" >> "${GITHUB_ENV}"
          echo "package=baba_yaga-web.zip" >> "${GITHUB_ENV}"

          # Rustflags:
          RUSTFLAGS='-Zthreads=0'
          RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }"'-Zshare-generics=y'
          echo "RUSTFLAGS=${RUSTFLAGS}" >> "${GITHUB_ENV}"

      - uses: nschloe/action-cached-lfs-checkout@v1

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      # Cache cargo dependencies
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Prepare output directories
        run: rm -rf tmp; mkdir -p tmp/binary '${{ env.app }}'

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Bevy CLI
        run: cargo binstall --version 0.1.0-alpha.2 --locked --no-confirm --force --git='https://github.com/TheBevyFlock/bevy_cli' bevy_cli

      - name: Build and add web bundle to app (Web)
        run: |
          cargo binstall --locked --no-confirm --force wasm-bindgen-cli
          cargo binstall --locked --no-confirm --force wasm-opt
          bevy build --locked --release --yes web --bundle
          mv 'target/bevy_web/web-release/baba_yaga' '${{ env.app }}'

      - name: Debug Build Output
        run: |
          echo "Debugging bas directory:"
          ls
          echo "Debugging build output:"
          ls ${{ env.app }}

      - name: Upload WASM Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.app }}
          name: wasm-artifacts

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Set environment variable for the directory name based on PR or main branch
    env:
      DEPLOY_DIR: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || 'main' }}
  
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-artifacts
      - name: Debug Download Output
        run: |
          echo "Debugging downloaded artifacts:"
          ls
      - name: Create gh-pages Directory
        run: |
          mkdir -p gh-pages/${{ env.DEPLOY_DIR }}
          cp -r assets gh-pages/${{ env.DEPLOY_DIR }}/
          cp -r src gh-pages/${{ env.DEPLOY_DIR }}/
          cp baba_yaga.js gh-pages/${{ env.DEPLOY_DIR }}/
          cp baba_yaga_bg.wasm gh-pages/${{ env.DEPLOY_DIR }}/
          cp baba_yaga_bg.wasm.d.ts gh-pages/${{ env.DEPLOY_DIR }}/
          cp Cargo.toml gh-pages/${{ env.DEPLOY_DIR }}/
          cp Cargo.lock gh-pages/${{ env.DEPLOY_DIR }}/
          cp package.json gh-pages/${{ env.DEPLOY_DIR }}/
      - name: Debug gh-pages Directory
        run: |
          echo "Debugging gh-pages directory:"
          ls -l gh-pages
          if [ -d "gh-pages/${{ env.DEPLOY_DIR }}" ]; then
            echo "Contents of ${{ env.DEPLOY_DIR }} directory:"
            ls -l gh-pages/${{ env.DEPLOY_DIR }}
          fi     
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gh-pages
          keep_files: true